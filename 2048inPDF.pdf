
%PDF-1.6

% Root
1 0 obj
<<
  /AcroForm <<
    /Fields [ 50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R 70 0 R 71 0 R ]
  >>
  /Pages 2 0 R
  /OpenAction 17 0 R
  /Type /Catalog
>>
endobj

2 0 obj
<<
  /Count 1
  /Kids [
    16 0 R
  ]
  /Type /Pages
>>

21 0 obj
[
  50 0 R 51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R 70 0 R 71 0 R
]
endobj


50 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /P 16 0 R
  /Rect [
    146.0 620 466.0 650
  ]
  /Subtype /Widget
  /T (Score)
  /Type /Annot
  /V (Score: 0)
>>
endobj

51 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    150.0 596 222.0 524
  ]
  /Subtype /Widget
  /T (P_0_0)
  /Type /Annot
>>
endobj

52 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    150.0 516 222.0 444
  ]
  /Subtype /Widget
  /T (P_0_1)
  /Type /Annot
>>
endobj

53 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    150.0 436 222.0 364
  ]
  /Subtype /Widget
  /T (P_0_2)
  /Type /Annot
>>
endobj

54 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    150.0 356 222.0 284
  ]
  /Subtype /Widget
  /T (P_0_3)
  /Type /Annot
>>
endobj

55 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    230.0 596 302.0 524
  ]
  /Subtype /Widget
  /T (P_1_0)
  /Type /Annot
>>
endobj

56 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    230.0 516 302.0 444
  ]
  /Subtype /Widget
  /T (P_1_1)
  /Type /Annot
>>
endobj

57 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    230.0 436 302.0 364
  ]
  /Subtype /Widget
  /T (P_1_2)
  /Type /Annot
>>
endobj

58 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    230.0 356 302.0 284
  ]
  /Subtype /Widget
  /T (P_1_3)
  /Type /Annot
>>
endobj

59 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    310.0 596 382.0 524
  ]
  /Subtype /Widget
  /T (P_2_0)
  /Type /Annot
>>
endobj

60 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    310.0 516 382.0 444
  ]
  /Subtype /Widget
  /T (P_2_1)
  /Type /Annot
>>
endobj

61 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    310.0 436 382.0 364
  ]
  /Subtype /Widget
  /T (P_2_2)
  /Type /Annot
>>
endobj

62 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    310.0 356 382.0 284
  ]
  /Subtype /Widget
  /T (P_2_3)
  /Type /Annot
>>
endobj

63 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    390.0 596 462.0 524
  ]
  /Subtype /Widget
  /T (P_3_0)
  /Type /Annot
>>
endobj

64 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    390.0 516 462.0 444
  ]
  /Subtype /Widget
  /T (P_3_1)
  /Type /Annot
>>
endobj

65 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    390.0 436 462.0 364
  ]
  /Subtype /Widget
  /T (P_3_2)
  /Type /Annot
>>
endobj

66 0 obj
<<
  /FT /Tx
  /Ff 1
  /DA "/F1 24 Tf 0.467 0.431 0.396 rg"
  /Q 1
  /MK <<
    /BG [0.847 0.800 0.749]
    /R 8
  >>
  /Border [ 0 0 2 ]
  /P 16 0 R
  /Rect [
    390.0 356 462.0 284
  ]
  /Subtype /Widget
  /T (P_3_3)
  /Type /Annot
>>
endobj

67 0 obj
<<
  /A <<
    /JS (handleArrowClick('up'))
    /S /JavaScript
  >>
  /F 4
  /FT /Btn
  /Ff 65536
  /MK <<
    /BG [
      0.941
      0.929
      0.910
    ]
    /CA (UP)
    /R 4
  >>
  /P 16 0 R
  /Rect [
    281.2 200 331.2 250
  ]
  /Subtype /Widget
  /T (Up)
  /Type /Annot
>>
endobj

68 0 obj
<<
  /A <<
    /JS (handleArrowClick('left'))
    /S /JavaScript
  >>
  /F 4
  /FT /Btn
  /Ff 65536
  /MK <<
    /BG [
      0.941
      0.929
      0.910
    ]
    /CA (LEFT)
    /R 4
  >>
  /P 16 0 R
  /Rect [
    201.2 160 251.2 210
  ]
  /Subtype /Widget
  /T (Left)
  /Type /Annot
>>
endobj

69 0 obj
<<
  /A <<
    /JS (handleArrowClick('down'))
    /S /JavaScript
  >>
  /F 4
  /FT /Btn
  /Ff 65536
  /MK <<
    /BG [
      0.941
      0.929
      0.910
    ]
    /CA (DOWN)
    /R 4
  >>
  /P 16 0 R
  /Rect [
    281.2 120 331.2 170
  ]
  /Subtype /Widget
  /T (Down)
  /Type /Annot
>>
endobj

70 0 obj
<<
  /A <<
    /JS (handleArrowClick('right'))
    /S /JavaScript
  >>
  /F 4
  /FT /Btn
  /Ff 65536
  /MK <<
    /BG [
      0.941
      0.929
      0.910
    ]
    /CA (RIGHT)
    /R 4
  >>
  /P 16 0 R
  /Rect [
    361.2 160 411.2 210
  ]
  /Subtype /Widget
  /T (Right)
  /Type /Annot
>>
endobj

71 0 obj
<<
  /A <<
    /JS (newGame())
    /S /JavaScript
  >>
  /F 4
  /FT /Btn
  /Ff 65536
  /MK <<
    /BG [
      0.941
      0.929
      0.910
    ]
    /CA (New Game)
    /R 4
  >>
  /P 16 0 R
  /Rect [
    146.0 60 466.0 100
  ]
  /Subtype /Widget
  /T (NewGame)
  /Type /Annot
>>
endobj


16 0 obj
<<
  /Annots 21 0 R
  /Contents 3 0 R
  /CropBox [
    0.0
    0.0
    612.0
    792.0
  ]
  /MediaBox [
    0.0
    0.0
    612.0
    792.0
  ]
  /Parent 2 0 R
  /Resources <<
    /Font <<
      /F1 22 0 R
    >>
  >>
  /Rotate 0
  /Type /Page
>>
endobj

22 0 obj
<<
  /BaseFont /Helvetica-Bold
  /Encoding /WinAnsiEncoding
  /Name /F1
  /Subtype /Type1
  /Type /Font
>>
endobj

3 0 obj
<< >>
stream
endstream
endobj

17 0 obj
<<
  /JS 42 0 R
  /S /JavaScript
>>
endobj

42 0 obj
<< >>
stream

var GRID_SIZE = 4;
var grid = [];
var pixel_fields = [];
var score = 0;

// Get color for tile value
function getTileColor(value) {
    switch(value) {
        case 2: return [0.933, 0.894, 0.855];     // #EEE4DA
        case 4: return [0.929, 0.878, 0.784];     // #EDE0C8
        case 8: return [0.949, 0.694, 0.475];     // #F2B179
        case 16: return [0.960, 0.584, 0.388];    // #F59563
        case 32: return [0.965, 0.486, 0.373];    // #F67C5F
        case 64: return [0.965, 0.369, 0.231];    // #F65E3B
        case 128: return [0.929, 0.812, 0.447];   // #EDCF72
        case 256: return [0.929, 0.800, 0.380];   // #EDCC61
        case 512: return [0.929, 0.784, 0.316];   // #EDC850
        case 1024: return [0.929, 0.773, 0.247];  // #EDC53F
        case 2048: return [0.929, 0.761, 0.180];  // #EDC22E
        default: return [0.847, 0.800, 0.749];    // #D8CFC0 for empty cells
    }
}

// Get text color based on tile value
function getTextColor(value) {
    return value <= 4 ? [0.467, 0.431, 0.396] : [0.973, 0.957, 0.945];  // Dark for 2/4, light for others
}

// Initialize the grid with two random tiles
function initializeGrid() {
    // Clear grid and score
    score = 0;
    
    // Initialize empty grid
    for (var x = 0; x < GRID_SIZE; x++) {
        grid[x] = [];
        pixel_fields[x] = [];
        for (var y = 0; y < GRID_SIZE; y++) {
            grid[x][y] = 0;
            pixel_fields[x][y] = this.getField(`P_${x}_${y}`);
        }
    }
    
    // Spawn initial tiles
    spawnRandomTile();
    spawnRandomTile();
    
    // Update display
    drawGrid();
}

// Spawn a random tile with value 2 or 4
function spawnRandomTile() {
    var emptyCells = [];
    for (var x = 0; x < GRID_SIZE; x++) {
        for (var y = 0; y < GRID_SIZE; y++) {
            if (grid[x][y] === 0) {
                emptyCells.push({x: x, y: y});
            }
        }
    }
    
    if (emptyCells.length > 0) {
        var cell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
        grid[cell.x][cell.y] = Math.random() < 0.9 ? 2 : 4;
        return true;
    }
    return false;
}

// Draw the grid on the PDF
function drawGrid() {
    for (var x = 0; x < GRID_SIZE; x++) {
        for (var y = 0; y < GRID_SIZE; y++) {
            var value = grid[x][y];
            var field = pixel_fields[x][y];
            
            // Update value
            field.value = value === 0 ? "" : value.toString();
            
            // Update colors
            var bgColor = getTileColor(value);
            var textColor = getTextColor(value);
            
            field.fillColor = bgColor;
            field.textColor = textColor;
        }
    }
    
    // Update score
    this.getField("Score").value = "Score: " + score;
}

// Move tiles in a direction
function moveGrid(direction) {
    var moved = false;
    var merged = Array(GRID_SIZE).fill().map(() => Array(GRID_SIZE).fill(false));
    
    function processTile(x, y, dx, dy) {
        if (grid[x][y] === 0) return false;
        
        var newX = x;
        var newY = y;
        var tilesMoved = false;
        
        // Move tile as far as possible
        while (true) {
            var nextX = newX + dx;
            var nextY = newY + dy;
            
            if (nextX < 0 || nextX >= GRID_SIZE || nextY < 0 || nextY >= GRID_SIZE) break;
            if (grid[nextX][nextY] !== 0 && grid[nextX][nextY] !== grid[x][y]) break;
            if (grid[nextX][nextY] === grid[x][y] && merged[nextX][nextY]) break;
            
            newX = nextX;
            newY = nextY;
        }
        
        if (newX !== x || newY !== y) {
            // Merge if possible
            if (grid[newX][newY] === grid[x][y]) {
                grid[newX][newY] *= 2;
                score += grid[newX][newY];
                merged[newX][newY] = true;
            } else {
                grid[newX][newY] = grid[x][y];
            }
            grid[x][y] = 0;
            tilesMoved = true;
        }
        
        return tilesMoved;
    }
    
    // Process all tiles based on direction
    if (direction === "left") {
        for (var y = 0; y < GRID_SIZE; y++)
            for (var x = 0; x < GRID_SIZE; x++)
                if (processTile(x, y, -1, 0)) moved = true;
    }
    else if (direction === "right") {
        for (var y = 0; y < GRID_SIZE; y++)
            for (var x = GRID_SIZE - 1; x >= 0; x--)
                if (processTile(x, y, 1, 0)) moved = true;
    }
    else if (direction === "up") {
        for (var x = 0; x < GRID_SIZE; x++)
            for (var y = 0; y < GRID_SIZE; y++)
                if (processTile(x, y, 0, -1)) moved = true;
    }
    else if (direction === "down") {
        for (var x = 0; x < GRID_SIZE; x++)
            for (var y = GRID_SIZE - 1; y >= 0; y--)
                if (processTile(x, y, 0, 1)) moved = true;
    }
    
    // Only spawn new tile and update if movement occurred
    if (moved) {
        spawnRandomTile();
        drawGrid();
        if (isGameOver()) {
            app.alert("Game Over! Final Score: " + score);
        }
    }
}

// Check if game is over
function isGameOver() {
    // Check for empty cells
    for (var x = 0; x < GRID_SIZE; x++) {
        for (var y = 0; y < GRID_SIZE; y++) {
            if (grid[x][y] === 0) return false;
        }
    }
    
    // Check for possible merges
    for (var x = 0; x < GRID_SIZE; x++) {
        for (var y = 0; y < GRID_SIZE; y++) {
            var value = grid[x][y];
            
            // Check right
            if (x < GRID_SIZE - 1 && grid[x + 1][y] === value) return false;
            
            // Check down
            if (y < GRID_SIZE - 1 && grid[x][y + 1] === value) return false;
        }
    }
    
    return true;
}

// Handle button clicks
function handleArrowClick(direction) {
    moveGrid(direction);
}

// Handle keyboard input
function handleKeyPress(event) {
    switch(event.keyCode) {
        case 37: // Left arrow
            moveGrid("left");
            break;
        case 38: // Up arrow
            moveGrid("up");
            break;
        case 39: // Right arrow
            moveGrid("right");
            break;
        case 40: // Down arrow
            moveGrid("down");
            break;
    }
}

// New Game button handler
function newGame() {
    initializeGrid();
}

// Initialize game
initializeGrid();

// Add keyboard event listener
this.addKeyDown = true;
this.setKeyDown("handleKeyPress");

endstream
endobj

trailer
<<
  /Root 1 0 R
>>

%%EOF
